condition[线程通信工具(类似与wait/notify)]
    condition.await()/signal/signalAll()
    await()
        #AQS的await()
        #释放锁时,fullyRelease()一个锁全部释放(针对重入锁一层一层释放的情况-通过获取重入次数直接减冲入次数来完全释放)
        condition的阻塞队列是单向链表
        阻塞当前节点的线程,唤醒next节点的线程
    signal()

    #总体流程:
        第一个线程进来后await()并释放锁后进入condition的阻塞队列
        第二个线程进来后获得锁signal()后释放锁并唤醒condition队列中的等待线程,让其进入aqs的同步队列去竞争锁


========================= CountDownLaunch ============================
共享锁:不存在锁竞争(所以不需要阻塞主线程?阻塞主线程是为了其他线程去竞争锁?)  #区别于reenterlock的独占锁
countDownLaunch.await();阻塞的是当前线程  放入AQS阻塞队列
计数器归零时 依次唤醒
========================= Semaphore ============================
//限流(AQS)
//permits #令牌(假如设置是5那么支持的最大并发数就是5,停车位例子)  #AQS中的state表示
//公平非公平 #公平:判断阻塞队列中有没有节点,有就不去获得锁
========================= CyclicBarrier ============================
ReentrantLock + Condition
