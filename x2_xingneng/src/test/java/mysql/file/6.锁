

表锁:


行锁:
    共享锁(读锁):select * from xxx where id=1 LOCK IN SHARE MODE;  #释放 commit/rollback
    排他锁(写锁):select * from xxx where id=1 FOR UPDATE; #commit/rollback

意向锁(可视为一种标志):由数据引擎自己维护,用户无法手动操作   #eg:来判定表有没有被锁(提升加表锁的效率,否则要逐行扫描来判定是否被锁)
    共享锁:表示事务准备给数据行加入共享锁,数据行加入共享锁前必须先获得该表的意向共享锁(IS锁)
    排他锁:表示事务准备给数据行加入排他锁,数据行加入共享锁前必须先获得该表的意向排他锁(IX锁)



======================================================================
* 加锁锁的是什么?索引
    两个事务同事操作
        没有索引的时候会锁全表,没有使用索引回去扫描所有rowid 会锁全表 #更新相同记录或者不同记录都会锁
        有主键索引和辅助索引:innodb检索数据的方式有关,辅助索引会回表使用主键索引操作,主键索引在使用的情况下会锁这条数据 #假如先用辅助索引加锁,辅助索引和主键索引都会被锁


* RR(repeteable read)&RC(read commited):https://blog.csdn.net/qq_35232663/article/details/89248647
    #rc的好处:1.没有命中索引不会锁表  2.半一致性读可以读到另一事务的更新的数据再次判断能不能更新
* 行锁的算法(锁住的范围):   #区间划分:./pic/10.区间划分jpg.jpg
    记录锁(Record Lock):唯一索引(唯一/主键)等职查询,精准匹配
    间隙锁(Gap Lock):记录不存在  #间隙锁和间隙锁不排斥,会排斥插入操作
        间隙锁的区间不会被分割 假如区间（10,100)是一个区间 事务1:select * from xxx where id>20 for update; 事务2:insert into xxx set id=11 ;会失败 因为此区间已经被锁主
    临键锁(Next-key Lock #innodb默认行锁算法):
        范围查询既包含记录又包含了区间
        查询不到任何记录会退化成间隙锁
        等值查询命中一条记录会退化成记录锁
        区间范围问题  (1,4] (4,7] (7,10] (10,正无穷) 事务1:select * from xxx where id>4 and id<8; 事务2:insert into xxx set id=9;或者更新id=10的记录都不会成功

* 死锁 mysql有检测机制不会等待

* 查看行锁等待状态
    show status like '%innodb_row_lock%'
    ...
* 避免死锁
    1 顺序访问
    2 数据排序
    3 申请足够级别的锁
    4 避免没有where条件的操作
    5 大事务分解成小事务
    6 使用等值查询而不是范围查询


