===================  负载均衡算法:(客户端到服务之间)
    1 轮询
    2 加权轮询
    3 随机算法
    4 最小连接数(根据后台来连接数量来均衡请求)
    5 hash 同一个客户端的请求落在同一台后台服务器上

===================  Session(用户信息)
    1 session复制#(适用于小项目)
        #存在的问题
            同步session会增加网络带宽开销
            session复制会导致数据冗余 100个用户 需要存储的数量 100*n(后台数量)  session存在内存里会严重消耗内存
    2 redis session共享
    3 无状态存储 客户端生成 ACCESS_TOKEN 服务端只用解析?不安全

===================  数据库性能提升(后台到db)
    1 读写分离(读多写少)
        #写库同步到读库 会有延迟
        #如果不能接受延迟会可以存储读到redis中
        #数据库路由:Mycat(可视作独立的数据库)/sharing-jdbc(与应用耦合)
    2 分库分表(历史表) 数据库迁移(定时迁移到历史表)
    3 数据清洗(大数据汇总,清洗)

===================  数据库分布式
通过分表分库实现数据库拆分
    1 分布式事务问题->分布式数据一致性问题
     spring cloud alibaba -> fescar(seata) /RocketMQ ->分布式事务解决方案
===================  应用分布式
===================  远程调用
Dubbo,thrift...
