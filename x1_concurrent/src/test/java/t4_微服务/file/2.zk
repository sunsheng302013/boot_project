zk:节点协调(一致性)

两阶段提交协议：是协调所有分布式原子事务参与者，并决定提交或取消（回滚）的分布式算法。
zk的两阶段提交协议：是协调部分(投票过半)分布式原子事务参与者，并决定提交或取消（回滚）的分布式算法。




zk设计：
    1.防止单点故障(集群 leader/follower/observer)
    2.数据同步
    3.leader选举算法(paxos->zab协议)
    4.2pc协议


zk集群:
             |-----follower #分担读请求 参与投票
    leader --|-----follower #分担读请求 参与投票
             |-----observer #同步数据 不参与投票
             |-----follower #分担读请求 参与投票


数据存储结构:树形
数据存储位置:ZKDataBase 基于内存  dataTree--><ConcurrentHashMap<String,DataNode>>nodes
操作命令:create/delete/set/get


===========================================
1.分布式锁的实现   # 1 or 2
    1.create /locl val #没有会创建，有会报错  #缺点:惊群效应(一个锁的释放会导致一堆线程来竞争)
    2.有序节点 create -s /lock/ val #后面的节点会监控前面的节点，其哪一个节点释放，下一个节点会自动顶上  #还可以实现分布式队列


2.服务节点维护
    1.持久化节点/临时节点
        repo-service[分组节点(持久化节点)]
            |-service1  [临时节点(失效后可自动消失[可能会有滞后性(基于心跳)])]   #临时节点的生命周期和客户端会话绑定在一起，客户端会话失效，则这个节点就会被自动清除。
            |-service2
            |-service3
             ....
    2.watcher机制     #监听本节点 或 子节点
        节点监听  get -w 节点  只有第一次变化时能监听到(只会监听一次)
          #应用:客户端订阅了服务节点 只要发生变化就会通知客户端

3.全局id 基于有序节点实现
4.负载均衡实现
    拿到所有目标服务地址
    实现动态感知


