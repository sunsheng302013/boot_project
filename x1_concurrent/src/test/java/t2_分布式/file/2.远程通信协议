分布式核心:通信

http通信协议:
    应用eg:spring cloud
    传输层协议:TCP/UDP
    应用层协议:http,FTP,SMTP,TelNet

    OSI七层网络模型       TCP/IP
     应用层                |
     表示层                |->应用层
     会话层                |
     传输层                传输层
     网络层                网络层
     数据链路层              |-->网络接口层
     物理层                  |
========================== 数据传输过程 ===========================
./pic/1.数据传输.jpg
发送端
    应用层: www.baidu.com
    传输层:                TCP头+HTTP请求报文
    网络层:           IP头+TCP头+HTTP请求报文
    网络接口层:MAC地址+IP头+TCP头+HTTP请求报文
    mac地址如何获取:ARP协议:已知ip获取mac地址  #广播机制去找 对应ip机器接收到消息会返回mac地址
    数据包会在链路上广播 对应mac的网卡会发现这个数据包
接收端:反着走
    拿到数据包 解析mac->解析ip->匹配tcp中的端口->解析报文/request信息等

============================ 负载均衡
OSI七层网络模型倒着数
二层:多个mac地址共用一个ip[vip(虚拟ip)] 集群中的机器使用不同的mac地址
三层:针对ip 实际ip共用一个虚拟ip        集群中的机器使用不同的ip
四层:传输层tcp/udp协议包含ip和端口 项目中常用 eg:f5硬负载
七层:针对应用层 根据http请求报文/请求的url/主机名等来负载 nginx默认使用

TCP/IP UDP/IP   #两者都是基于IP协议
可靠     不可靠
慢       快
TCP:
    1 建立连接机制
    2 三次握手机制
        #客户端+服务端总共发三个数据包 #客户端:你好,服务端:你好,客户端:收到你发出的你好,服务端:传输信息
        tcp在三次握手的过程中ip层和mac层在做什么:消息都会带上ip,mac会将发送端的步骤都走一遍
    3 syn攻击 伪造大量不存在的ip去请求服务端,而服务端无法得到确认回复,就会占用大量连接
    4 连接关闭:(四次挥手:四个数据包) :两个2次
        客户端发送断开请求包  服务端回复表示收到断开请求包
        服务端发送可以关闭的数据包(服务端的任务已经完成) 客户端发送收到服务端发送的可以关闭的数据包
        客户端2MSL(两个生命周期后才会关闭[安全保护机制,为了去报能够收到服务端的数据包,没有收到信息2msl后也会执行正常关闭])
    5 tcp是全双工(双方既可做服务端又可做客户端)
    6 长连接 通过不断发送心跳包来保证长连接(建立好管道后通过发送心跳包来维持而不需要重复的去三次握手来建立连接)

#三次握手/四次挥手相关问题:https://blog.csdn.net/sinat_41144773/article/details/88314735

============================ 通信过程
阻塞:连接阻塞/IO阻塞导致连接数量有限   //(BIO)
    accept() //连接阻塞
    流操作阻塞(读写阻塞-获取输入输出流)#类似生产消费#socket内核:发送/接收缓冲区缓冲区   //./pic/2.发送接收缓冲区.jpg
        发送数据发现发送缓冲区满了后会阻塞-直到不满
        接收数据发现接收数据缓冲区空了会阻塞-直到有数据

        缓冲区大小可以实现限流(缓冲区实现流量整形):缓冲区满了告诉发送端不要发送了(通过滑动窗口协议来实现,否则会造成网络拥堵)
解决方式1:用新线程开启Socket建立连接 可以解决IO阻塞(因为每个都是独立的Socket连接)  #但是机器支持的线程数量有限(线程池方式)
解决方式2:NIO机制
    #传统客户端发送请求 等待服务端准备就绪才会返回数据,这期间的等待是阻塞
    #非阻塞:发送请求 服务端如果没有准备好就返回状态值EWOULDBLOCK 然后客户端再次请求 期间不会阻塞(不断的轮询去检查状态)
    用户空间 - 内核缓冲区 - 网卡缓冲区 #服务端的 内核缓冲区数据拷贝到网卡缓冲区 网卡缓冲区再拷贝到客户端的内核缓冲区 内核缓冲区再拷贝到用户空间

多路复用(AIO):不是轮询去检查状态而是 通过事件通知(去告诉客户端数据准备好了,客户端才发送请求去获取数据)
    linux中的io复用机制：外部文件会当作fd(文件描述)socket也会当作fd
        select/poll:线性轮询去监听就绪的socket #局限性:select默认支持1024个socket,当tps过大时局限性比较大
        epoll:基于事件驱动,对多个socket/fd建立监听,发现某些fd就绪,就通知客户端来获取数据,客户端发送请求数据的请求(伪异步,真正的异步不需要这步,服务端直接返回即可),服务端返回数据

    同步非阻塞/异步非阻塞:连接异步非阻塞,io同步存在阻塞
        poll/epoll区别:select轮询,支持的socket数量小/事件通知;